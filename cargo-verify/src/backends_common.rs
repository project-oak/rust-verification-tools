// Copyright 2020-2021 The Propverify authors
//
// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
// option. This file may not be copied, modified, or distributed
// except according to those terms.

use std::path::Path;

use lazy_static::lazy_static;
use log::info;
use regex::Regex;
use serde::Serialize;
use tinytemplate::TinyTemplate;

use crate::CVResult;

/// Detect lines that match #[should_panic(expected = ...)] string.
pub fn is_expected_panic(line: &str, expect: &Option<&str>, name: &str) -> bool {
    lazy_static! {
        static ref PANICKED: Regex = Regex::new(r" panicked at '([^']*)',\s+(.*)").unwrap();
        // This second form of panic is for multi-line panic messages
        // such as that generated by assert_eq!
        static ref PANICKED2: Regex = Regex::new(r" panicked at '([^']*)").unwrap();
    }

    if let Some(expect) = expect {
        if let Some(caps) = PANICKED.captures(line) {
            let message = caps.get(1).unwrap().as_str();
            let srcloc = caps.get(2).unwrap().as_str();
            if message.contains(expect) {
                info!(
                    "     {}: Detected expected failure '{}' at {}",
                    name, message, srcloc
                );
                info!("     Error message: {}", line);
                return true;
            }
        } else if let Some(caps) = PANICKED2.captures(line) {
            let message = caps.get(1).unwrap().as_str();
            if message.contains(expect) {
                info!(
                    "     {}: Detected expected failure '{}'",
                    name, message
                );
                info!("     Error message: {}", line);
                return true;
            }
        }
    }

    false
}

#[derive(Serialize)]
struct FormatFlagContext<'a> {
    entry: &'a str,
    file: &'a str,
    output_dir: &'a str,
}

/// Format a user provided backend argument by replacing Handlebars with the appropriate values.
pub fn format_flag(flag: &str, entry: &str, bcfile: &Path, out_dir: &Path) -> CVResult<String> {
    let mut template = TinyTemplate::new();
    template.add_template("flag", flag)?;

    let context = FormatFlagContext {
        entry,
        file: &bcfile.to_string_lossy(),
        output_dir: &out_dir.to_string_lossy(),
    };

    let res = template.render("flag", &context)?;

    Ok(res)
}
